#ifndef _PACKETS_DEFINED_
#define _PACKETS_DEFINED_
enum {
  LC = 0x01, // Link Control
  LP = 0x02, // Link Policy
  BB = 0x03, // Controller & Baseband
  IF = 0x04, // Informational
  ST = 0x05, // Status
  TS = 0x06  // Testing
};

#define OPCODE(ogf,ocf) (((ogf) << 10) | (ocf))
#endif

// 1 - integer (1)
// 2 - integer (2)
// 3 - integer (3)
// 4 - integer (4)
// 8 - integer (8)
// b - BD_ADDR (6)
// x - data (16)
// * - unknown number of bytes
// [ - begin array (0)
// ] - end array (0)
// n - null padded UTF-8 string (248)
// c - channel classification (10)
// i - extended inquiry (240)
// C - supported commands (64)

COMMAND(LC, 0x0001, INQUIRY, "311", "")
COMMAND(LC, 0x0002, INQUIRY_CANCEL, "", "1")
COMMAND(LC, 0x0003, PERIODIC_INQUIRY_MODE, "22311", "1")
COMMAND(LC, 0x0004, EXIT_PERIODIC_INQUIRY_MODE, "", "1")
COMMAND(LC, 0x0005, CREATE_CONNECTION, "b21121", "")
COMMAND(LC, 0x0006, DISCONNECT, "b1", "")
COMMAND(LC, 0x0008, CREATE_CONNECTION_CANCEL, "b", "1b")
COMMAND(LC, 0x0009, ACCEPT_CONNECTION_REQUEST, "b1", "")
COMMAND(LC, 0x000a, REJECT_CONNECTION_REQUEST, "b1", "")
COMMAND(LC, 0x000b, LINK_KEY_REQUEST_REPLY, "bx", "1b")
COMMAND(LC, 0x000c, LINK_KEY_REQUEST_NEGATIVE_REPLY, "b", "1b")
COMMAND(LC, 0x000d, PIN_CODE_REQUEST_REPLY, "b1x", "1b")
COMMAND(LC, 0x000e, PIN_CODE_REQUEST_NEGATIVE_REPLY, "b", "1b")
COMMAND(LC, 0x000f, CHANGE_CONNECTION_PACKET_TYPE, "h2", "")
COMMAND(LC, 0x0011, AUTHENTICATION_REQUESTED, "h", "")
COMMAND(LC, 0x0013, SET_CONNECTION_ENCRYPTION, "h1", "")
COMMAND(LC, 0x0015, CHANGE_CONNECTION_LINK_KEY, "h", "")
COMMAND(LC, 0x0017, MASTER_LINK_KEY, "1", "")
COMMAND(LC, 0x0019, REMOTE_NAME_REQUEST, "b112", "")
COMMAND(LC, 0x001a, REMOTE_NAME_REQUEST_CANCEL, "b", "1b")
COMMAND(LC, 0x001b, READ_REMOTE_SUPPORTED_FEATURES, "h", "")
COMMAND(LC, 0x001c, READ_REMOTE_EXTENDED_FEATURES, "h1", "")
COMMAND(LC, 0x001d, READ_REMOTE_VERSION_INFORMATION, "h", "")
COMMAND(LC, 0x001f, READ_CLOCK_OFFSET, "h", "")
COMMAND(LC, 0x0020, READ_LMP_H, "h", "1h14")
COMMAND(LC, 0x0028, SETUP_SYNCHRONOUS_CONNECTION, "h442212", "")
COMMAND(LC, 0x0029, ACCEPT_SYNCHRONOUS_CONNECTION_REQUEST, "b442212", "")
COMMAND(LC, 0x002a, REJECT_SYNCHRONOUS_CONNECTION_REQUEST, "b1", "")
COMMAND(LC, 0x002b, IO_CAPABILITY_REQUEST_REPLY, "b111", "1b")
COMMAND(LC, 0x002c, USER_CONFIRMATION_REQUEST_REPLY, "b", "1b")
COMMAND(LC, 0x002d, USER_CONFIRMATION_REQUEST_NEGATIVE_REPLY, "b", "1b")
COMMAND(LC, 0x002e, USER_PASSKEY_REQUEST_REPLY, "b4", "1b")
COMMAND(LC, 0x002f, USER_PASSKEY_REQUEST_NEGATIVE_REPLY, "b", "1b")
COMMAND(LC, 0x0030, REMOTE_OOB_DATA_REQUEST_REPLY, "bxx", "1b")
COMMAND(LC, 0x0033, REMOTE_OOB_DATA_REQUEST_NEGATIVE_REPLY, "b", "1b")
COMMAND(LC, 0x0034, IO_CAPABILITY_REQUEST_NEGATIVE_REPLY, "b1", "1b")
COMMAND(LC, 0x0035, CREATE_PHYSICAL_LINK, "111*", "")
COMMAND(LC, 0x0036, ACCEPT_PHYSICAL_LINK, "111*", "")
COMMAND(LC, 0x0037, DISCONNECT_PHYSICAL_LINK, "11", "")
COMMAND(LC, 0x0038, CREATE_LOGICAL_LINK, "1xx", "")
COMMAND(LC, 0x0039, ACCEPT_LOGICAL_LINK, "1xx", "")
COMMAND(LC, 0x003a, DISCONNECT_LOGICAL_LINK, "h", "")
COMMAND(LC, 0x003b, LOGICAL_LINK_CANCEL, "11", "111")
COMMAND(LC, 0x003c, FLOW_SPEC_MODIFY, "hxx", "")
                       
COMMAND(LP, 0x0001, HOLD_MODE, "h22", "")
COMMAND(LP, 0x0003, SNIFF_MODE, "h2222", "")
COMMAND(LP, 0x0004, EXIT_SNIFF_MODE, "h", "")
COMMAND(LP, 0x0005, PARK_STATE, "h22", "")
COMMAND(LP, 0x0006, EXIT_PARK_STATE, "h", "")
COMMAND(LP, 0x0007, QOS_SETUP, "h114444", "")
COMMAND(LP, 0x0009, ROLE_DISCOVERY, "h", "1h1")
COMMAND(LP, 0x000b, SWITCH_ROLE, "b1", "")
COMMAND(LP, 0x000c, READ_LINK_POLICY_SETTINGS, "h", "1h2")
COMMAND(LP, 0x000d, WRITE_LINK_POLICY, "h2", "1h")
COMMAND(LP, 0x000e, READ_DEFAULT_LINK_POLICY_SETTINGS, "", "12")
COMMAND(LP, 0x000f, WRITE_DEFAULT_LINK_POLICY_SETTINGS, "2", "1")
COMMAND(LP, 0x0010, FLOW_SPECIFICATION, "h1114444", "")
COMMAND(LP, 0x0011, SNIFF_SUBRATING, "h222", "1h")
                       
COMMAND(BB, 0x0001, SET_EVENT_MASK, "8", "1")
COMMAND(BB, 0x0003, RESET, "", "1")
COMMAND(BB, 0x0005, SET_EVENT_FILTER, "111*", "1")
COMMAND(BB, 0x0008, FLUSH, "h", "1h")
COMMAND(BB, 0x0009, READ_PIN_TYPE, "", "11")
COMMAND(BB, 0x000a, WRITE_PIN_TYPE, "1", "1")
COMMAND(BB, 0x000b, CREATE_NEW_UNIT_KEY, "", "1")
COMMAND(BB, 0x000d, READ_STORED_LINK_KEY, "b1", "122")
COMMAND(BB, 0x0011, WRITE_STORED_LINK_KEY, "1[bx]", "11")
COMMAND(BB, 0x0012, DELETE_STORED_LINK_KEY, "b1", "12")
COMMAND(BB, 0x0013, WRITE_LOCAL_NAME_COMMAND, "n", "1")
COMMAND(BB, 0x0014, READ_LOCAL_NAME_COMMAND, "", "1n")
COMMAND(BB, 0x0015, READ_CONNECTION_ACCEPT_TIMEOUT, "", "12")
COMMAND(BB, 0x0016, WRITE_CONNECTION_ACCEPT_TIMEOUT, "2", "1")
COMMAND(BB, 0x0017, READ_PAGE_TIMEOUT, "", "12")
COMMAND(BB, 0x0018, WRITE_PAGE_TIMEOUT, "2", "1")
COMMAND(BB, 0x0019, READ_SCAN_ENABLE, "", "11")
COMMAND(BB, 0x001a, WRITE_SCAN_ENABLE, "1", "1")
COMMAND(BB, 0x001b, READ_PAGE_SCAN_ACTIVITY, "", "122")
COMMAND(BB, 0x001c, WRITE_PAGE_SCAN_ACTIVITY, "22", "1")
COMMAND(BB, 0x001d, READ_INQUIRY_SCAN_ACTIVITY, "", "122")
COMMAND(BB, 0x001e, WRITE_INQUIRY_SCAN_ACTIVITY, "22", "1")
COMMAND(BB, 0x001f, READ_AUTHENTICATION_ENABLE, "", "11")
COMMAND(BB, 0x0020, WRITE_AUTHENTICATION_ENABLE, "1", "1")
COMMAND(BB, 0x0023, READ_CLASS_OF_DEVICE, "", "13")
COMMAND(BB, 0x0024, WRITE_CLASS_OF_DEVICE, "3", "1")
COMMAND(BB, 0x0025, READ_VOICE_SETTING, "", "12")
COMMAND(BB, 0x0026, WRITE_VOICE_SETTING, "2", "1")
COMMAND(BB, 0x0027, READ_AUTOMATIC_FLUSH_TIMEOUT, "h", "1h2")
COMMAND(BB, 0x0028, WRITE_AUTOMATIC_FLUSH_TIMEOUT, "h2", "1h")
COMMAND(BB, 0x0029, READ_NUM_BROADCAST_RETRANSMISSIONS, "", "11")
COMMAND(BB, 0x002a, WRITE_NUM_BROADCAST_RETRANSMISSIONS, "1", "1")
COMMAND(BB, 0x002b, READ_HOLD_MODE_ACTIVITY, "", "11")
COMMAND(BB, 0x002c, WRITE_HOLD_MODE_ACTIVITY, "1", "1")
COMMAND(BB, 0x002d, READ_TRANSMIT_POWER_LEVEL, "h1", "1h1")
COMMAND(BB, 0x002e, READ_SYNCHRONOUS_FLOW_CONTROL_ENABLE, "", "11")
COMMAND(BB, 0x002f, WRITE_SYNCHRONOUS_FLOW_CONTROL_ENABLE, "1", "1")
COMMAND(BB, 0x0031, SET_CONTROLLER_TO_HOST_FLOW_CONTROL, "1", "1")
COMMAND(BB, 0x0033, HOST_BUFFER_SIZE, "2122", "1")
COMMAND(BB, 0x0035, HOST_NUMBER_OF_COMPLETED_PACKETS, "1[h2]", "")
COMMAND(BB, 0x0036, READ_LINK_SUPERVISION_TIMEOUT, "h", "1h2")
COMMAND(BB, 0x0037, WRITE_LINK_SUPERVISION_TIMEOUT, "h2", "1h")
COMMAND(BB, 0x0038, READ_NUMBER_OF_SUPPORTED_IAC, "", "11")
COMMAND(BB, 0x0039, READ_CURRENT_IAC_LAP, "", "11[3]")
COMMAND(BB, 0x003a, WRITE_CURRENT_IAC_LAP, "1[3]", "1")
COMMAND(BB, 0x003f, SET_AFH_HOST_CHANNEL_CLASSIFICATION, "c", "1")
COMMAND(BB, 0x0042, READ_INQUIRY_SCAN_TYPE, "", "11")
COMMAND(BB, 0x0043, WRITE_INQUIRY_SCAN_TYPE, "1", "1")
COMMAND(BB, 0x0044, READ_INQUIRY_MODE, "", "11")
COMMAND(BB, 0x0045, WRITE_INQUIRY_MODE, "1", "1")
COMMAND(BB, 0x0046, READ_PAGE_SCAN_TYPE, "", "11")
COMMAND(BB, 0x0047, WRITE_PAGE_SCAN_TYPE, "1", "1")
COMMAND(BB, 0x0048, READ_AFH_CHANNEL_ASSESSMENT_MODE, "", "11")
COMMAND(BB, 0x0049, WRITE_AFH_CHANNEL_ASSESSMENT_MODE, "1", "1")
COMMAND(BB, 0x0051, READ_EXTENDED_INQURY_RESPONSE, "", "11i")
COMMAND(BB, 0x0052, WRITE_EXTENDED_INQUIRY_RESPONSE, "i", "1")
COMMAND(BB, 0x0053, REFRESH_ENCRYPTION_KEY, "h", "")
COMMAND(BB, 0x0055, READ_SIMPLE_PAIRING_MODE, "", "11")
COMMAND(BB, 0x0056, WRITE_SIMPLE_PAIING_MODE, "1", "1")
COMMAND(BB, 0x0057, READ_LOCAL_OOB_DATA, "", "1xx")
COMMAND(BB, 0x0058, READ_INQUIRY_RESPONSE_TRANSMIT_POWER_LEVEL, "", "11")
COMMAND(BB, 0x0059, WRITE_INQUIRY_RESPONSE_TRANSMIT_POWER_LEVEL, "1", "1")
COMMAND(BB, 0x0060, SEND_KEYPRESS_NOTIFICATION, "b1", "1b")
COMMAND(BB, 0x005a, READ_DEFAULT_ERRONEOUS_DATA_REPORTING, "", "11")
COMMAND(BB, 0x005b, WRITE_DEFAULT_ERRONEOUS_DATA_REPORTING, "1", "1")
COMMAND(BB, 0x005f, ENHANCED_FLUSH, "h1", "")
COMMAND(BB, 0x0061, READ_LOGICAL_LINK_ACCEPT_TIMEOUT, "", "12")
COMMAND(BB, 0x0062, WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT, "2", "1")
COMMAND(BB, 0x0063, SET_EVENT_MASK_PAGE_2, "8", "1")
COMMAND(BB, 0x0064, READ_LOCATION_DATA, "", "1*")
COMMAND(BB, 0x0065, WRITE_LOCATION_DATA, "*", "1")
COMMAND(BB, 0x0066, READ_FLOW_CONTROL_MODE, "", "11")
COMMAND(BB, 0x0067, WRITE_FLOW_CONTROL_MODE, "1", "1")
COMMAND(BB, 0x0068, READ_ENHANCED_TRANSMIT_POWER_LEVEL, "h1", "1h111")
COMMAND(BB, 0x0069, READ_BEST_EFFORT_FLUSH_TIMEOUT, "h", "14")
COMMAND(BB, 0x006a, WRITE_BEST_EFFORT_FLUSH_TIMEOUT, "h4", "1")
COMMAND(BB, 0x006b, SHORT_RANGE_MODE, "11", "1")
COMMAND(BB, 0x006c, READ_LE_HOST_SUPPORT, "", "111")
COMMAND(BB, 0x006d, WRITE_LE_HOST_SUPPORT, "11", "1")
                      
COMMAND(IF, 0x0001, READ_LOCAL_VERSION_INFORMATION, "", "112122")
COMMAND(IF, 0x0002, READ_LOCAL_SUPPORTED_COMMANDS, "", "1C")
COMMAND(IF, 0x0003, READ_LOCAL_SUPPORTED_FEATURES, "", "18")
COMMAND(IF, 0x0004, READ_LOCAL_EXTENDED_FEATURES, "1", "1118")
COMMAND(IF, 0x0005, READ_BUFFER_SIZE_COMMAND, "", "12122")
COMMAND(IF, 0x0009, READ_BD_ADDR, "", "1b")
COMMAND(IF, 0x000a, READ_DATA_BLOCK_SIZE, "", "1222")

COMMAND(ST, 0x0001, READ_FAILED_CONTACT_COUNTER, "h", "1h2")
COMMAND(ST, 0x0002, RESET_FAILED_CONTACT_COUNTER, "h", "1h")
COMMAND(ST, 0x0003, READ_LINK_QUALITY, "h", "1h1")
COMMAND(ST, 0x0005, READ_RSSI, "h", "1h1")
COMMAND(ST, 0x0006, READ_AFH_CHANNEL_MAP, "h", "1h1c")
COMMAND(ST, 0x0007, READ_CLOCK, "h1", "1h42")
COMMAND(ST, 0x0008, READ_ENCRYPTION_KEY_SIZE, "h", "1h1")
COMMAND(ST, 0x0009, READ_LOCAL_AMP_INFO, "", "11444412244")
COMMAND(ST, 0x000a, READ_LOCAL_AMP_ASSOC, "122", "112*")
COMMAND(ST, 0x000b, WRITE_REMOTE_AMP_ASSOC, "122*", "11")

COMMAND(TS, 0x0001, READ_LOOPBACK_MODE, "", "11")
COMMAND(TS, 0x0002, WRITE_LOOPBACK_MODE, "1", "1")
COMMAND(TS, 0x0003, ENABLE_DEVICE_UNDER_TEST_MODE, "", "1")
COMMAND(TS, 0x0004, WRITE_SIMPLE_PAIRING_DEBUG_MODE, "1", "1")
COMMAND(TS, 0x0007, ENABLE_AMP_RECEIVER_REPORTS, "11", "1")
COMMAND(TS, 0x0008, AMP_TEST_END, "", "1")
COMMAND(TS, 0x0009, AMP_TEST, "1", "1")

EVENT(0x01, INQUIRY_COMPLETE, "1")
EVENT(0x02, INQIRY_RESULT, "1[b11132]")
EVENT(0x03, CONNECTION_COMPLETE, "12b1")
EVENT(0x04, CONNECTION_REQUEST, "b31")
EVENT(0x05, DISCONNECTION_COMPLETE, "1h1")
EVENT(0x06, AUTHENTICATION_COMPLETE, "1h")
EVENT(0x07, REMOTE_NAME_REQUEST_COMPLETE, "1bn")
EVENT(0x08, ENCRYPTION_CHANGE, "1h1")
EVENT(0x09, CHANGE_CONNECTION_LINK_KEY_COMPLETE, "1h")
EVENT(0x0a, MASTER_LINK_KEY_COMPLETE, "1h1")
EVENT(0x0b, READ_REMOTE_SUPPORTED_FEATURES_COMPLETE, "1h8")
EVENT(0x0c, READ_REMOTE_VERSION_INFORMATION_COMPLETE, "1h122")
EVENT(0x0d, QOS_SETUP_COMPLETE, "1h114444")
EVENT(0x0e, COMMAND_COMPLETE, "12*")
EVENT(0x0f, COMMAND_STATUS, "112")
EVENT(0x10, HARDWARE_ERROR, "1")
EVENT(0x11, FLUSH_OCCURRED, "h")
EVENT(0x12, ROLE_CHANGE, "1b1")
EVENT(0x13, NUMBER_OF_COMPLETED_PACKETS, "1[h2]")
EVENT(0x14, MODE_CHANGE, "1h12")
EVENT(0x15, RETURN_LINK_KEYS, "1[bx]")
EVENT(0x16, PIN_CODE_REQUEST, "b")
EVENT(0x17, LINK_KEY_REQUEST, "b")
EVENT(0x18, LINK_KEY_NOTIFICATION, "bx1")
EVENT(0x19, LOOPBACK_COMMAND, "*")
EVENT(0x1a, DATA_BUFFER_OVERFLOW, "1")
EVENT(0x1b, MAX_SLOTS_CHANGE, "h1")
EVENT(0x1c, READ_CLOCK_OFFSET_COMPLETE, "1h2")
EVENT(0x1d, CONNECTION_PACKET_TYPE_CHANGED, "1h2")
EVENT(0x1e, QOS_VIOLATION, "h")
EVENT(0x20, PAGE_SCAN_REPETITION_MODE_CHANGE, "b1")
EVENT(0x21, FLOW_SPECIFICATION_COMPLETE, "1H1114444")
EVENT(0x22, INQUIRY_RESULT_WITH_RSSI, "1[b11321]")
EVENT(0x23, READ_REMOTE_EXTENDED_FEATURES_COMPLETE, "1h118")
EVENT(0x2c, SYNCHRONOUS_CONNECTION_COMPLETE_EVENT, "1hb111221")
EVENT(0x2d, SYNCHRONOUS_CONNECTION_CHANGED, "1h1122")
EVENT(0x2e, SNIFF_SUBRATING, "1h2222")
EVENT(0x2f, EXTENDED_INQUIRY_RESULT, "1b11321i")
EVENT(0x30, ENCRYPTION_KEY_REFRESH_COMPLETE, "1h")
EVENT(0x31, IO_CAPABILITY_REQUEST, "b")
EVENT(0x32, IO_CAPABILITY_RESPONSE, "b111")
EVENT(0x33, USER_CONFIRMATION_REQUEST, "b4")
EVENT(0x34, USER_PASSKEY_REQUEST, "b")
EVENT(0x35, REMOTE_OOB_DATA_REQUEST, "b")
EVENT(0x36, SIMPLE_PAIRING_COMPLETE, "1b")
EVENT(0x38, LINK_SUPERVISION_TIMEOUT_CHANGED, "h2")
EVENT(0x39, ENHANCED_FLUSH_COMPLETE, "h")
EVENT(0x3b, USER_PASSKEY_NOTIFICATION, "b4")
EVENT(0x3c, KEYPRESS_NOTIFICATION, "b1")
EVENT(0x3d, REMOTE_HOST_SUPPORTED_FEATURES_NOTIFICATION, "b8")
EVENT(0x3e, LE_META_EVENT, "*")
EVENT(0x40, PHYSICAL_LINK_COMPLETE, "11")
EVENT(0x41, CHANNEL_SELECTED, "1")
EVENT(0x42, DISCONNECTION_PHYSICAL_LINK_COMPLETE, "111")
EVENT(0x43, PHYSICAL_LINK_LOSS_EARLY_WARNING, "11")
EVENT(0x44, PHYSICAL_LINK_RECOVERY_EVENT, "1")
EVENT(0x45, LOGICAL_LINK_COMPLETE, "1h11")
EVENT(0x46, DISCONNECTION_LOGICAL_LINK_COMPLETE, "1h1")
EVENT(0x47, FLOW_SPEC_MODIFY_COMPLETE, "1h")
EVENT(0x48, NUMBER_OF_DATA_BLOCKS_COMPLETED, "21[h22]")
EVENT(0x4c, SHORT_RANGE_MODE_CHANGE_COMPLETE, "111")
EVENT(0x4d, AMP_STATUS_CHANGE, "11")
EVENT(0x49, AMP_START_TEST, "11")
EVENT(0x4a, AMP_TEST_END, "11")
EVENT(0x4b, AMP_RECEIVER_REPORT, "1142244")

LE_EVENT(0x01, CONNECTION_COMPLETE, "1h1162221")
LE_EVENT(0x02, ADVERTISING_REPORT, "1[11B1*1]")
LE_EVENT(0x03, CONNECTION_UPDATE_COMPLETE, "1h222")
LE_EVENT(0x04, READ_REMOTE_USED_FEATURES_COMPLETE, "1h8")
LE_EVENT(0x05, LONG_TERM_KEY_REQUEST, "h82")
